# js

## 알림창

- alert, promp(”메세지”,”플레이스홀더”), confirn 확인, 취소
- 화면출력: document.write(” ”), console.loe(” ”)

## 호이스팅

개념: 상황에 따라 변의 선언과 할당을 분리해서 선언 부분을 스코프의 가장 위쪽으로 어올리는 것
풀이: 스트립트 내 변수와 함수의 선언 순서에 상관 없이 순서가 끌어올려진 듯한 현상

## 형변환

- 정수형 변환 : Number(a), parslnt(a)

## 내장 객체(코어 객체)

### String
- 문자열 변환(String(a))
- 문자열 비교(match): a.match(b)

### Math
- 난수발생: Math.floor(Math.random()*100)+1;

### Array
- concat() : 배열합치기
- push(), unshift() : 맨뒤/맨앞 새로운 요소 추가
- pop() / shift : 맨뒤/맨앞 요소 제거
- splice() : 원하는 위치 요소 추가, 삭제
- slice(): 기존 배열을 바꾸지 않으면서 요소를 꺼냄
- forEach
- 배열.find(n) : n번째 찾기
- filter : 조건에 맞는 값을 모두 뽑아 배열로 새로 만듬
- reduce(): 배열의 각 요소를 순회하면서 값을 누적하여 하나의 결과값으로 반환
- 배열.sort(): 오름차순 / 배열.reverse(): 내림차순

# DOM
## 이벤트 종류
1) 마우스 이벤트: click, dbclick, mouseover, mouseout, mousemove…
2) 키 이벤트: keydown, keyup, keypress…
3) 로드 이벤트: load, resize, scroll…
4) 폼 이벤트: focus, blur, change, submit, reset, select…
- change: 요소에 값이 변경되었을 때
- submit: submit 버튼을 눌렀을 때 이벤트 발생
- select: input, textarea 요소 안의 텍스트를 선택했을 때 발생

## 함수 사용
### on이벤트
<aside>
💡 1) 문서객체.on이벤트타입명 = 이벤트핸들러;
    ex) n.onclidk = function(){}; 또는 n.onclick = ch;
</aside>

### addEventListener()
<aside>
💡 2) 문서객체.addEventListener(’이벤트타입’,콜백함수);
    ex) n.addEventListener(’click’,funcrion(){});
</aside>

### removeEventListener()
<aside>
💡 3) 문서객체.removeEventListener(’이벤트타입’,콜백함수);
</aside>

## 버블링, 캡쳐링
- 이벤트 캡처링: DOM의 부모 노드에서 자식 노드로 전달 - 위 → 아래
- 이벤트 버블링: DOM의 자식 노드에서 부모 노드로 전달(이벤트 후) - 아래 → 위
- stopPropagation() 사용
<aside>
m.onclick = function(e){
    e.stopPropagation(); //버블링, 캡쳐링 막는 함수
    this.style.borderColor='blue';
}
</aside>

## Node
- parentNode: 부모노드 선택
- childNodes: 자식노드 선택. 여러개이므로 복수(배열), 배열은 1부터 시작함 
  ex) a.childNodes[1]
- 이전/다음 요소: nextElemetSibling / previousElementSibling

### 요소 접근
- 3가지 접근 방법
    1. document.폼네임.요소네임  //제일 많이 씀
    2. document.forms['폼네임'].elements['요소네임']  //잘 안씀
    3. document.forms['폼네임']['요소네임']

- document.getElementById("") : 이름만 적음
- querySelector(""): 클래스는 (".a") / 아이디는 ("#a")